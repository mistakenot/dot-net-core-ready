@{
    ViewBag.Title = "Home Page";
}

<div class="row">
    <div class="col-sm-10 col-sm-offset-7">
        <form data-bind="submit: search.submitSearch"
              class="theme-on-color color-fill-accent-vivid-high p-xxs">
            <div class="form-group">
                <label for="searchTerm">
                    <span class="glyph glyph-magnifier"></span>
                    <span class="hidden-xs">Search for NuGet Package</span>
                </label>
                <span>
                    <input type="text" 
                           class="form-control" 
                           id="searchTerm" 
                           placeholder="Search..." 
                           autocomplete="off"
                           data-bind="value: search.searchTerm">
                </span>
            </div>
        </form>
    </div>
    <div class="col-sm-1">
        <br />
        <div data-bind="visible: search.isSearching"
             class="progress-ring progress-large">
            <div class="progress-circle"></div>
            <div class="progress-circle"></div>
            <div class="progress-circle"></div>
            <div class="progress-circle"></div>
            <div class="progress-circle"></div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div data-bind="visible: nuget.isLoading" class="glyphicon-align-center">
            <div class="progress-ring progress-large">
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
            </div>
        </div>
        <table data-bind="visible: nuget.isVisible()" class="table">
            <thead>
            <tr>
                <th>Package Version</th>
                <th>.NET Core Ready</th>
                <th>Supports .NET Standard</th>
            </tr>
            </thead>
            <tbody data-bind="foreach: nuget.frameworks">
            <tr data-bind="css: {success: supportsNetCore, danger: !supportsNetCore}">
                <td>
                    <span data-bind="text: packageVersion"></span>
                </td>
                <td>
                    <span class="glyph glyph-checkmark" 
                          data-bind="visible: supportsNetCore"
                          aria-hidden="true"></span>
                    <span class="glyph glyph-cancel"
                          data-bind="visible: !supportsNetCore"
                          aria-hidden="true"></span>
                </td>
                <td data-bind="text: netStandardVersions"></td>
            </tr>
            </tbody>
        </table>
    </div>
    <div class="col-md-12">
        <div data-bind="visible: github.isLoading" class="glyphicon-align-center">
            <div class="progress-ring progress-large">
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
                <div class="progress-circle"></div>
            </div>
        </div>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Github Issues</th>
                </tr>
            </thead>
            <tbody data-bind="foreach: github.issues">
                <tr>
                    <td>
                        <h6>
                            <span class="type-sh2">
                                <a data-bind="text: title, attr: {href: url}"></a>
                            </span>
                            <span class="label label-warning" data-bind="visible: isOpen">Open</span>
                            <span class="label label-primary" data-bind="visible: !isOpen">Closed</span>
                        </h6>
                        <p data-bind="text: summary">

                        </p>

                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>

@section scripts{
    <script>
        function SearchModel(onSubmit) {
            var self = this;
            this.searchTerm = ko.observable("");
            this.isSearching = ko.observable(false);
            this.submitSearch = function() {
                onSubmit(self.searchTerm());
                self.isSearching(false);
            }
        }

        function NugetModel(onResults) {
            var self = this;
            this.isLoading = ko.observable(false);
            this.version = ko.observable("");
            this.id = ko.observable("");
            this.frameworks = ko.observableArray([]);
            this.activeSearch = null;
            this.isDirty = ko.observable(false);
            this.load = function(id) {
                var url = '@(Url.Action("Frameworks", "Nuget"))';
                self.isLoading(true);
                self.frameworks([]);
                self.activeSearch = $.getJSON(
                    url,
                    { id },
                    (data) => {
                        self.cancel();
                        var versions = data.map(d => new NugetVersionModel(d.PackageVersion, d.NetStandardVersions));
                        self.frameworks(versions);
                        if (onResults) {
                            onResults(versions);
                        }
                        self.isVisible(true);
                    });
            }
            this.cancel = function() {
                if (self.activeSearch) {
                    self.activeSearch.abort();
                }
                self.isLoading(false);
            }
            this.isVisible = () => {
                return !self.isDirty() && !self.isLoading();
            }
        }

        function NugetVersionModel(version, netStandardVersions) {
            this.packageVersion = version;
            this.netStandardVersions = netStandardVersions.join(', ');
            this.supportsNetCore = netStandardVersions.length > 0;
        }

        function GithubModel() {
            var self = this;
            this.isLoading = ko.observable(false);
            this.issues = ko.observableArray([]);
            this.activeSearch = undefined;
            var url = '@Url.Action("Search", "Github")';

            this.load = (packageId) => {
                self.isLoading(true);
                self.activeSearch = $.getJSON(
                    url,
                    { searchTerm: packageId },
                    (data) => {
                        var models = data.map(d =>
                            new GithubIssueModel(d.Title, d.Summary, d.Url, d.IsOpen));
                        console.log(models);
                        self.issues(models);
                        self.cancel();
                    });
            }

            this.cancel = () => {
                if (self.activeSearch) {
                    self.activeSearch.abort();
                }
                self.isLoading(false);
            }
        }

        function GithubIssueModel(title, summary, repo, isOpen) {
            this.title = title;
            this.summary = summary;
            this.url = repo;
            this.isOpen = isOpen;
        }

        function SuggestionsModel() {
            var self = this;
            this.isLoading = ko.observable(false);
            this.suggestions = ko.observableArray([]);
            this.activeSearch = undefined;
            var url = '@Url.Action("Alternatives", "Nuget")';

            this.load = (id, version) => {
                self.isLoading(true);
                self.activeSearch = $.getJSON(
                    url,
                    { id, version },
                    (data) => {
                        var models = data.map(d => new SuggestionModel(d.id, d.package));
                        self.suggestions(models);
                    });
            }

            this.cancel = () => {
                if (self.activeSearch) {
                    self.activeSearch.abort();
                }
                self.isLoading(false);
            }
        }

        function SuggestionModel(id, version) {
            this.id = id;
            this.version = version;
        }

        function Model() {
            var self = this;
            this.search = new SearchModel(s => {
                self.nuget.load(s);
                self.github.load(s);
                self.suggestions.load(s);
            });
            this.nuget = new NugetModel();
            this.github = new GithubModel();
            this.suggestions = new SuggestionsModel();
        }

        var model = new Model();

        ko.applyBindings(model);

        model.github.load();

        // instantiate the bloodhound suggestion engine
        var numbers = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.whitespace,
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            remote: {
                url: '@Url.Action("Autocomplete", "Nuget")',
                prepare: (query, settings) => {
                    model.search.isSearching(true);
                    settings.data = { searchTerm: query }
                    return settings;
                },
                transform: (response) => {
                    model.search.isSearching(false);
                    return response;
                }
            }
        });

        // initialize the bloodhound suggestion engine
        numbers.initialize();

        $('#searchTerm').typeahead({
            items: 4,
            source: numbers.ttAdapter(),
            afterSelect: (item) => {
                model.search.submitSearch();
            }
        });

    </script>
}